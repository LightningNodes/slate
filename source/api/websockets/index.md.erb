<h1 id='web-sockets'>Web Sockets</h1>

<h2 id="get-listen-key">Get Listen Key</h2>

`POST /v1/retail/listen-key`

Obtain a WebSocket listen key from the endpoint.

```javascript
async function getListenKey() {
    const endpoint = "/v1/retail/listen-key";

    // Call the postRequest function
    return await postRequest(endpoint, {});
}

```python
def create_or_update_listen_key():
  timestamp = str(int(time.time() * 1000))

  params = {
      'timestamp': timestamp
  }

  # Convert the parameters to a query string (if signing a query string)
  data_to_sign = json.dumps(params, separators=(',', ':'))
  signature = generate_signature(api_secret, data_to_sign)

  # Headers for the request
  headers = {
      'api-key': api_key,
      'Content-Type': 'application/json',
      'signature': signature,
  }

  try:
      # Send the POST request to create or update a listen key
      response = requests.post(f'{listen_key_url}', json=params, headers=headers)
      response.raise_for_status()
      response_data = response.json()
      print('Listen key created or updated successfully:', json.dumps(response_data, indent=4))
  except requests.exceptions.HTTPError as err:
      print(f"Failed {response.status_code}: {response.text}")

```

<h2 id="update-listen-key">Update Listen Key</h2>

`PUT /v1/retail/listen-key`

Update the expiry of a listen key.

```javascript
async function updateListenKey() {
    const endpoint = "/v1/retail/listen-key";
    
    // Call the getRequest function
    return await putRequest(endpoint, {});
}
```

```python
def update_listen_key_expiry():
  timestamp = str(int(time.time() * 1000))
  
  params = {
      'timestamp': timestamp
  }
  
  data_to_sign = json.dumps(params, separators=(',', ':'))
  
  # Generate the signature using the provided helper function
  signature = generate_signature(api_secret, data_to_sign)
  
  # Headers for the PUT request
  headers = {
      'api-key': api_key,
      'signature': signature,
  }
  
  try:
      # Send the PUT request to update the listen key expiry
      response = requests.put(listen_key_url, json=params, headers=headers)
      print('Listen key expiry updated successfully:', response)
  except Exception as e:
      print(f"Failed {response.status_code}: {response.text}")
```

<h2 id="delete-listen-key">Delete Listen Key</h2>

`DELETE /v1/retail/listen-key`

```javascript
async function deleteListenKey() {
    const endpoint = "/v1/retail/listen-key";
    
    // Call the deleteRequest function
    return await deleteRequest(endpoint, {});
}
```

```python
def delete_listen_key():
  # Generate the current timestamp
  timestamp = str(int(time.time() * 1000))
  
  # Prepare the data for the request (listenKey is passed in the URL path)
  params = {
      'timestamp': timestamp
  }
  
  # Generate the signature based on the params
  data_to_sign = json.dumps(params, separators=(',', ':'))
  signature = generate_signature(api_secret, data_to_sign)
  
  # Headers for the DELETE request
  headers = {
      'api-key': api_key,
      'signature': signature,
      'accept': '*/*'
  }
  
  # Construct the full URL, inserting the listenKey into the path
  delete_listen_key_url = f"{base_url}/v1/retail/listen-key/"
  
  try:
      # Send the DELETE request to delete the listen key
      response = requests.delete(delete_listen_key_url, json=params, headers=headers)
      response.raise_for_status() # Raises an error for 4xx/5xx responses
      print('Listen key deleted successfully.')
  except requests.exceptions.HTTPError as err:
      print(f"Error: {err.response.text if err.response else err}")
  except Exception as e:
      print(f"An unexpected error occurred: {str(e)}")
```

