<h1 id='web-sockets'>Web Sockets</h1>

<h2 id="create-listen-key"> Create Listen Key </h2>

`POST /v1/retail/listen-key`

Creates a new listen key for WebSocket connections. 

A listen key is used to maintain a persistent connection to the WebSocket server, allowing you to receive real-time updates on user account data.


```code
const baseUrl = process.env.PI42_BASE_URL + '/v1/retail/listen-key';

// Function to generate a signature for the request
const generateSignature = (params: object, apiSecret: string) => {
  return crypto
    .createHmac('sha256', apiSecret)
    .update(JSON.stringify(params))
    .digest('hex');
};

// Function to call Create Listen Key API
async function createListenKey(apiKey: string, apiSecret: string) {
  const params = {
    timestamp: Date.now().toString(),
  };

  const signature = generateSignature(params, apiSecret);

  try {
    const response = await axios.post(baseUrl, params, {
      headers: {
        'api-key': apiKey,
        'Content-Type': 'application/json',
        'signature': signature,
      },
    });
    console.log('Create Listen Key Response:', response.data);
    return response.data.listenKey;
  } catch (error) {
    console.error(
      'Error creating Listen Key:',
      error.response ? error.response.data : error.message
    );
    throw error; // Rethrow the error for further handling
  }
}
```
<table>
    <thead>
        <tr>
            <th>Parameter</th>
            <th>Type</th>
            <th>Required</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>timestamp</td>
            <td>string</td>
            <td>Yes</td>
            <td>The current timestamp in milliseconds to ensure request uniqueness and prevent replay attacks</td>
        </tr>
    </tbody>
</table>

The `createListenKey` function also requires an `apiKey` and `apiSecret` for authentication, and these are included in the headers of the request:

- `apiKey`: The API key for authenticating the request.
- `apiSecret`: The API secret used to generate the signature for request validation.

The function generates a signature using HMAC SHA-256 encryption of the request parameters and sends a POST request to the API endpoint to create a new listen key. If successful, it logs and returns the listen key; otherwise, it logs and throws the error for further handling.

<h2 id="authenticated-web-sockets">Authenticated Web Sockets</h2>

Authenticated Web Socket stream base URL `https://fawss.pi42.com/auth-stream`.

<aside class="notice">

Requires listenkey that can be obtained from the <a href="#create-listen-key">Create Listen Key API</a>

</aside>

The WebSocket client connects to a server using a listen key and listens for various events related to trading activities and session management. Each event handler logs specific information when the event is received.

Event listeners are described below:

<table>
        <thead>
            <tr>
                <th>Event</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>connect</td>
                <td>Triggered when the connection to the WebSocket server is open.</td>
            </tr>
            <tr>
                <td>newPosition</td>
                <td>Triggered when a new position is received from the server.</td>
            </tr>
            <tr>
                <td>orderFilled</td>
                <td>Triggered when an order is completely filled.</td>
            </tr>
            <tr>
                <td>orderPartiallyFilled</td>
                <td>Triggered when an order is partially filled.</td>
            </tr>
            <tr>
                <td>orderCancelled</td>
                <td>Triggered when an order is cancelled.</td>
            </tr>
            <tr>
                <td>orderFailed</td>
                <td>Triggered when an order fails.</td>
            </tr>
            <tr>
                <td>newOrder</td>
                <td>Triggered when a new order is created.</td>
            </tr>
            <tr>
                <td>updatePosition</td>
                <td>Triggered when a position is updated.</td>
            </tr>
            <tr>
                <td>closePosition</td>
                <td>Triggered when a position is closed.</td>
            </tr>
            <tr>
                <td>balanceUpdate</td>
                <td>Triggered when the balance is updated.</td>
            </tr>
            <tr>
                <td>newTrade</td>
                <td>Triggered when a new trade occurs.</td>
            </tr>
            <tr>
                <td>sessionExpired</td>
                <td>Triggered when the session expires.</td>
            </tr>
            <tr>
                <td>disconnect</td>
                <td>Triggered when the connection to the WebSocket server is closed.</td>
            </tr>
        </tbody>
</table>


```javascript
const serverUrl = `https://fawss.pi42.com/auth-stream/${listenKey}`;

// Create a new socket connection
const socket = io(serverUrl);

// Event listener for when the connection is open
socket.on('connect', () => {
  console.log('Connected to WebSocket server');
});

// Event listener for messages from the server

// Event listener for newPosition events
socket.on('newPosition', (data: any) => {
  console.log('New position received:', data);
});

// Listen for order filled event
socket.on('orderFilled', (data: any) => {
  console.log('Order filled:', data);
});

// Listen for order partially filled event
socket.on('orderPartiallyFilled', (data: any) => {
  console.log('Order partially filled:', data);
});

// Listen for order cancelled event
socket.on('orderCancelled', (data: any) => {
  console.log('Order cancelled:', data);
});

// Listen for order failed event
socket.on('orderFailed', (data: any) => {
  console.log('Order failed:', data);
});

// Listen for new order event
socket.on('newOrder', (data: any) => {
  console.log('New order:', data);
});

// Listen for update position event
socket.on('updatePosition', (data: any) => {
  console.log('Position updated:', data);
});

// Listen for close position event
socket.on('closePosition', (data: any) => {
  console.log('Position closed:', data);
});

// Listen for balance update event
socket.on('balanceUpdate', (data: any) => {
  console.log('Balance updated:', data);
});

// Listen for new trade event
socket.on('newTrade', (data: any) => {
  console.log('New trade:', data);
});

// Listen for session expiry
socket.on('sessionExpired', (data: any) => {
  console.log('Session Expired:', data);
});

// Event listener for when the connection is closed
socket.on('disconnect', () => {
  console.log('Disconnected from WebSocket server');
});
```

<h2 id="public-web-sockets">Public Web Sockets</h2>

Public Web Socket URL `https://fawss.pi42.com/`. Once connected, users can subscribe to different topics mentioned below:

<table>
    <thead>
        <tr>
            <th>Parameter</th>
            <th>Example</th>
            <th>Listening Topic</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>contract_pair@depth_minGrouping</td>
            <td>btcinr@depth
            _
            0.1</td>
            <td>depthUpdate</td>
        </tr>
        <tr>
            <td>contract
            _pair@kline
            _
            interval</td>
            <td>btcinr@kline
            _
            1m</td>
            <td>kline</td>
        </tr>
        <tr>
            <td>contract
            _pair@markPrice</td>
            <td>btcinr@markPrice</td>
            <td>markPriceUpdate</td>
        </tr>
        <tr>
            <td>contract
            _pair@aggTrade</td>
            <td>btcinr@aggTrade</td>
            <td>aggTrade</td>
        </tr>
        <tr>
            <td>contract
            _pair@ticker</td>
            <td>btcinr@ticker</td>
            <td>24hrTicker</td>
        </tr>
        <tr>
            <td>contract
            _pair@marketInfo</td>
            <td>btcinr@marketInfo</td>
            <td>marketInfo</td>
        </tr>
        <tr>
            <td>markPriceArr</td>
            <td>N/A</td>
            <td>markPriceArr</td>
        </tr>
        <tr>
            <td>tickerArr</td>
            <td>N/A</td>
            <td>tickerArr</td>
        </tr>
        <tr>
            <td>All contracts details</td>
            <td>N/A</td>
            <td>allContractDetails</td>
        </tr>
</table>

- Intervals: The intervals for kline (candlestick) data can be `1m`, `3m`, `5m`, `15m`, `30m`, `1h`, `2h`, `4h`, `6h`, `8h`, `12h`, `1d`, `3d`, `1w`, `1M`.
- MinGroupings: Depth groupings vary by contract. For example, 0.1 is used for BTC.

```code
import { io } from 'socket.io-client';

// WebSocket server URL
const serverUrl = 'https://fawss.pi42.com/';

// Create a new socket connection
const socket = io(serverUrl);

// Event listener for when the connection is open
socket.on('connect', () => {
  console.log('Connected to WebSocket server');
  subscribeToTopics();
});

// Event listener for when the connection is closed
socket.on('disconnect', () => {
  console.log('Disconnected from WebSocket server');
});

// Event listener for errors
socket.on('error', (error: any) => {
  console.error('Socket.IO error:', error);
});

// Function to subscribe to various WebSocket topics
function subscribeToTopics() {
  const topics = ['btcinr@depth_0.1', 'btcinr@markPrice']; // List of topics you want to subscribe to

  // Subscribe to each topic
  socket.emit('subscribe', {
    params: topics, // Sends the topics array to the WebSocket server
  });

  // Event listener for updates on various data topics
  socket.on('depthUpdate', (data) => {
    console.log('depthUpdate: ', data);
  });

  socket.on('kline', (data) => {
    console.log('kline: ', data);
  });

  socket.on('markPriceUpdate', (data) => {
    console.log('markPriceUpdate: ', data);
  });

  socket.on('aggTrade', (data) => {
    console.log('aggTrade: ', data);
  });

  socket.on('24hrTicker', (data) => {
    console.log('24hrTicker: ', data);
  });

  socket.on('marketInfo', (data) => {
    console.log('marketInfo: ', data);
  });

  socket.on('markPriceArr', (data) => {
    console.log('markPriceArr: ', data);
  });

  socket.on('tickerArr', (data) => {
    console.log('tickerArr: ', data);
  });

  socket.on('marginRate', (data) => {
    console.log('marginRate: ', data);
  });
}
```

<h2 id="get-listen-key">Get Listen Key</h2>

`POST /v1/retail/listen-key`

Retrieves a new listen key for WebSocket connections. 

A listen key is used to maintain a persistent WebSocket connection, allowing you to receive real-time updates.

```javascript
async function getListenKey() {
    const endpoint = "/v1/retail/listen-key";

    // Call the postRequest function
    return await postRequest(endpoint, {});
}
```
```python
def create_or_update_listen_key():
  timestamp = str(int(time.time() * 1000))

  params = {
      'timestamp': timestamp
  }

  # Convert the parameters to a query string (if signing a query string)
  data_to_sign = json.dumps(params, separators=(',', ':'))
  signature = generate_signature(api_secret, data_to_sign)

  # Headers for the request
  headers = {
      'api-key': api_key,
      'Content-Type': 'application/json',
      'signature': signature,
  }

  try:
      # Send the POST request to create or update a listen key
      response = requests.post(f'{listen_key_url}', json=params, headers=headers)
      response.raise_for_status()
      response_data = response.json()
      print('Listen key created or updated successfully:', json.dumps(response_data, indent=4))
  except requests.exceptions.HTTPError as err:
      print(f"Failed {response.status_code}: {response.text}")
```

<table>
    <thead>
        <tr>
            <th>Parameter</th>
            <th>Type</th>
            <th>Required</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>None</td>
            <td>N/A</td>
            <td>No</td>
            <td>Retrieves a new listen key for WebSocket connections. <br/>A listen key is used to maintain a persistent WebSocket connection, allowing you to receive real-time updates.</td>
        </tr>
    </tbody>
</table>


<h2 id="update-listen-key">Update Listen Key</h2>

`PUT /v1/retail/listen-key`

Updates the listen key for WebSocket connections. 


Updating the listen key is necessary to maintain an active WebSocket connection and prevent disconnections due to inactivity.

<table>
    <thead>
        <tr>
            <th>Parameter</th>
            <th>Type</th>
            <th>Required</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>None</td>
            <td>N/A</td>
            <td>No</td>
            <td>Updates the listen key for WebSocket connections. </td>
        </tr>
    </tbody>
</table>


```javascript
async function updateListenKey() {
    const endpoint = "/v1/retail/listen-key";
    
    // Call the getRequest function
    return await putRequest(endpoint, {});
}
```

```python
def update_listen_key_expiry():
  timestamp = str(int(time.time() * 1000))
  
  params = {
      'timestamp': timestamp
  }
  
  data_to_sign = json.dumps(params, separators=(',', ':'))
  
  # Generate the signature using the provided helper function
  signature = generate_signature(api_secret, data_to_sign)
  
  # Headers for the PUT request
  headers = {
      'api-key': api_key,
      'signature': signature,
  }
  
  try:
      # Send the PUT request to update the listen key expiry
      response = requests.put(listen_key_url, json=params, headers=headers)
      print('Listen key expiry updated successfully:', response)
  except Exception as e:
      print(f"Failed {response.status_code}: {response.text}")
```

<h2 id="delete-listen-key">Delete Listen Key</h2>

`DELETE /v1/retail/listen-key`

Deletes the listen key for WebSocket connections.

This action terminates the connection and stops the receipt of real-time updates.


```javascript
async function deleteListenKey() {
    const endpoint = "/v1/retail/listen-key";
    
    // Call the deleteRequest function
    return await deleteRequest(endpoint, {});
}
```

```python
def delete_listen_key():
  # Generate the current timestamp
  timestamp = str(int(time.time() * 1000))
  
  # Prepare the data for the request (listenKey is passed in the URL path)
  params = {
      'timestamp': timestamp
  }
  
  # Generate the signature based on the params
  data_to_sign = json.dumps(params, separators=(',', ':'))
  signature = generate_signature(api_secret, data_to_sign)
  
  # Headers for the DELETE request
  headers = {
      'api-key': api_key,
      'signature': signature,
      'accept': '*/*'
  }
  
  # Construct the full URL, inserting the listenKey into the path
  delete_listen_key_url = f"{base_url}/v1/retail/listen-key/"
  
  try:
      # Send the DELETE request to delete the listen key
      response = requests.delete(delete_listen_key_url, json=params, headers=headers)
      response.raise_for_status() # Raises an error for 4xx/5xx responses
      print('Listen key deleted successfully.')
  except requests.exceptions.HTTPError as err:
      print(f"Error: {err.response.text if err.response else err}")
  except Exception as e:
      print(f"An unexpected error occurred: {str(e)}")
```

<table>
    <thead>
        <tr>
            <th>Parameter</th>
            <th>Type</th>
            <th>Required</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>None</td>
            <td>N/A</td>
            <td>No</td>
            <td>Deletes the listen key for WebSocket connections</td>
        </tr>
    </tbody>
</table>

