<h1 id='public-endpoints'>Public Endpoints</h1>

<p>Public endpoints in Pi42 are designed to facilitate easy access to various functionalities of the Pi42 platform, particularly for integration with external systems and applications. 
Below is an overview of the public endpoints available in Pi42, their typical uses, and example API calls.</p>

<h2 id='ticker-update-24hr'>Ticker Update (24Hr)</h2>

<p><code>GET /v1/market/ticker24Hr</code></p>

<p>Fetch the 24-hour market ticker data for a specific trading pair, in this case, &quot;BTCINR&quot;.</p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchTicker</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/market/ticker24Hr/</span><span class="dl">"</span><span class="p">;</span>  <span class="c1">// API endpoint for fetching the 24-hour market ticker</span>
    <span class="kd">const</span> <span class="nx">contractPair</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">BTCINR</span><span class="dl">"</span><span class="p">;</span>              <span class="c1">// The trading pair for which the ticker data is being requested</span>
    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">endpoint</span><span class="p">}${</span><span class="nx">contractPair</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>   <span class="c1">// Constructs the full URL by appending the trading pair to the endpoint</span>

    <span class="c1">// Call the getRequest function with the constructed URL</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">getRequest</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="k">def</span> <span class="nf">get_24hr_ticker_update</span><span class="p">():</span>
    <span class="c1"># Get the contract pair input from the user
</span>    <span class="n">contract_pair</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter the contract pair (e.g., btc, eth): "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>

    <span class="c1"># Validate the input
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">contract_pair</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Invalid contract pair. Please enter a valid contract pair (e.g., btc, eth)."</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># Construct the full URL for the API request using the provided contract pair
</span>    <span class="n">full_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"https://testnet-api.pi42.com/v1/market/ticker24Hr/</span><span class="si">{</span><span class="n">contract_pair</span><span class="si">}</span><span class="s">"</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># Send the GET request to the API
</span>        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">full_url</span><span class="p">)</span>
        <span class="n">response</span><span class="p">.</span><span class="n">raise_for_status</span><span class="p">()</span>  <span class="c1"># Raise an error for HTTP 4xx/5xx responses
</span>
        <span class="c1"># Parse the JSON response data
</span>        <span class="n">response_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>

        <span class="c1"># Print the 24-hour ticker update in a formatted manner
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'24-hour ticker update fetched successfully:'</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
    <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="c1"># Handle HTTP errors specifically
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: </span><span class="si">{</span><span class="n">err</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">text</span> <span class="k">if</span> <span class="n">err</span><span class="p">.</span><span class="n">response</span> <span class="k">else</span> <span class="n">err</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="c1"># Handle any other unexpected errors
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>


</code></pre></div>
<h2 id='agg-trade-update'>Aggregate Trade Update</h2>

<p><code>GET /v1/market/aggTrade</code></p>

<p>Fetch the aggregated trade data for a specific trading pair, in this case, &quot;BTCINR&quot;. </p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchAggTrade</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/market/aggTrade/</span><span class="dl">"</span><span class="p">;</span>   <span class="c1">// Define the API endpoint for aggregated trades</span>
    <span class="kd">const</span> <span class="nx">contractPair</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">BTCINR</span><span class="dl">"</span><span class="p">;</span>             <span class="c1">// Specify the trading pair (e.g., Bitcoin to Indian Rupee)</span>
    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">endpoint</span><span class="p">}${</span><span class="nx">contractPair</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>  <span class="c1">// Construct the full URL by appending the trading pair to the endpoint</span>

    <span class="c1">// Call the getRequest function to send the GET request to the API</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">getRequest</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="k">def</span> <span class="nf">get_trade_updates</span><span class="p">():</span>
    <span class="c1"># Prompt the user to enter a contract pair
</span>    <span class="n">contract_pair</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter the contract pair (e.g., btc, eth): "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>

    <span class="c1"># Validate the user input
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">contract_pair</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Invalid contract pair. Please enter a valid contract pair (e.g., btc, eth)."</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># Construct the URL for the API request using the provided contract pair
</span>    <span class="n">full_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"https://testnet-api.pi42.com/v1/market/aggTrade/</span><span class="si">{</span><span class="n">contract_pair</span><span class="si">}</span><span class="s">"</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># Send the GET request to fetch trade updates
</span>        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">full_url</span><span class="p">)</span>
        <span class="n">response</span><span class="p">.</span><span class="n">raise_for_status</span><span class="p">()</span>  <span class="c1"># Raise an exception for HTTP error responses
</span>
        <span class="c1"># Parse the JSON response data
</span>        <span class="n">response_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>

        <span class="c1"># Print the trade updates in a formatted manner
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'Trade updates fetched successfully:'</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
    <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="c1"># Handle HTTP errors specifically
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: </span><span class="si">{</span><span class="n">err</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">text</span> <span class="k">if</span> <span class="n">err</span><span class="p">.</span><span class="n">response</span> <span class="k">else</span> <span class="n">err</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="c1"># Handle any other unexpected errors
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

</code></pre></div>
<h2 id='depth-update'>Depth Update</h2>

<p><code>GET /v1/market/depth/</code></p>

<p>Retrieves the order book depth data for a specified trading pair and interval.</p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchDepth</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/market/depth/</span><span class="dl">"</span><span class="p">;</span>   <span class="c1">// API endpoint for fetching order book depth data</span>
    <span class="kd">const</span> <span class="nx">contractPair</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">BTCINR</span><span class="dl">"</span><span class="p">;</span>           <span class="c1">// Trading pair for which the depth data is requested</span>
    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">endpoint</span><span class="p">}${</span><span class="nx">contractPair</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span> <span class="c1">// Constructs the full URL by appending the trading pair to the endpoint</span>

    <span class="c1">// Call the getRequest function with the constructed URL</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">getRequest</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="k">def</span> <span class="nf">get_depth_update</span><span class="p">():</span>
    <span class="c1"># Prompt the user to enter a contract pair
</span>    <span class="n">contract_pair</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter the contract pair (e.g., btc, eth): "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>

    <span class="c1"># Validate the user input
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">contract_pair</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Invalid contract pair. Please enter a valid contract pair (e.g., btc, eth)."</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># Construct the URL for the API request using the provided contract pair
</span>    <span class="n">full_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"https://testnet-api.pi42.com/v1/market/depth/</span><span class="si">{</span><span class="n">contract_pair</span><span class="si">}</span><span class="s">"</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># Send the GET request to fetch depth updates
</span>        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">full_url</span><span class="p">)</span>
        <span class="n">response</span><span class="p">.</span><span class="n">raise_for_status</span><span class="p">()</span>  <span class="c1"># Raises an error for 4xx/5xx responses
</span>
        <span class="c1"># Parse the JSON response data
</span>        <span class="n">response_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>

        <span class="c1"># Print the depth update in a formatted manner
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'Depth update fetched successfully:'</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
    <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="c1"># Handle HTTP errors specifically
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: </span><span class="si">{</span><span class="n">err</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">text</span> <span class="k">if</span> <span class="n">err</span><span class="p">.</span><span class="n">response</span> <span class="k">else</span> <span class="n">err</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="c1"># Handle any other unexpected errors
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div>
<h2 id='klines'>Get Klines</h2>

<p><code>POST /v1/market/klines</code></p>

<p>Retrieves candlestick (Kline) data for a specific trading pair.</p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">getKlines</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/market/klines</span><span class="dl">"</span><span class="p">;</span>

    <span class="c1">// Define the fixed values for positionId and amount (though not used in this function)</span>
    <span class="kd">const</span> <span class="nx">positionId</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">18c6c979-b089-4e67-b627-4c2072d0d5cb</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Replace with your actual position ID</span>
    <span class="kd">const</span> <span class="nx">amount</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// Replace with the actual amount you want to add</span>

    <span class="c1">// Prepare request payload</span>
    <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">pair</span><span class="p">:</span> <span class="dl">"</span><span class="s2">BTCINR</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">interval</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1m</span><span class="dl">"</span><span class="p">,</span>
        <span class="c1">// Optional</span>
        <span class="na">startTime</span><span class="p">:</span> <span class="mi">1696425435000</span><span class="p">,</span>
        <span class="na">endTime</span><span class="p">:</span> <span class="mi">1696425435999</span><span class="p">,</span>
        <span class="na">limit</span><span class="p">:</span> <span class="mi">1000</span>
    <span class="p">};</span>

    <span class="c1">// Call the postRequest function</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">postRequest</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="nx">params</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="k">def</span> <span class="nf">get_kline_data</span><span class="p">():</span>
  <span class="k">try</span><span class="p">:</span>
      <span class="c1"># User inputs
</span>      <span class="n">pair</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter the trading pair (e.g., BTCINR): "</span><span class="p">).</span><span class="n">upper</span><span class="p">()</span>
      <span class="n">interval</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter the interval (e.g., 1m, 5m, 1h): "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>

      <span class="c1"># Prepare the request body (JSON)
</span>      <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
          <span class="s">'pair'</span><span class="p">:</span> <span class="n">pair</span><span class="p">,</span>
          <span class="s">'interval'</span><span class="p">:</span> <span class="n">interval</span><span class="p">,</span>
          <span class="s">'limit'</span><span class="p">:</span> <span class="mi">1000</span>
      <span class="p">}</span>

      <span class="c1"># Headers for the POST request (no API key or signature required)
</span>      <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
          <span class="s">'Content-Type'</span><span class="p">:</span> <span class="s">'application/json'</span>
      <span class="p">}</span>

      <span class="c1"># Construct the full URL for the Kline endpoint
</span>      <span class="n">kline_url</span> <span class="o">=</span> <span class="s">"https://testnet-api.pi42.com/v1/market/klines"</span>

      <span class="c1"># Send the POST request to get Kline data
</span>      <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">kline_url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
      <span class="n">response</span><span class="p">.</span><span class="n">raise_for_status</span><span class="p">()</span> <span class="c1"># Raises an error for 4xx/5xx responses
</span>      <span class="n">response_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>
      <span class="k">print</span><span class="p">(</span><span class="s">'Kline data fetched successfully:'</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>

  <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"Please enter valid inputs for pair, interval."</span><span class="p">)</span>
  <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: </span><span class="si">{</span><span class="n">err</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">text</span> <span class="k">if</span> <span class="n">err</span><span class="p">.</span><span class="n">response</span> <span class="k">else</span> <span class="n">err</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div>