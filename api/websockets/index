<h1 id='web-sockets'>Web Sockets</h1>

<h2 id="create-listen-key"> Create Listen Key </h2>

<p>Users can create a Listen Key for each API key. By default each listen key will be valid for 60 minutes.</p>

<p><code>POST /v1/retail/listen-key</code></p>
<div class="highlight"><pre class="highlight plaintext"><code>const baseUrl = process.env.PI42_BASE_URL + '/v1/retail/listen-key';

// Function to generate a signature for the request
const generateSignature = (params: object, apiSecret: string) =&gt; {
  return crypto
    .createHmac('sha256', apiSecret)
    .update(JSON.stringify(params))
    .digest('hex');
};

// Function to call Create Listen Key API
async function createListenKey(apiKey: string, apiSecret: string) {
  const params = {
    timestamp: Date.now().toString(),
  };

  const signature = generateSignature(params, apiSecret);

  try {
    const response = await axios.post(baseUrl, params, {
      headers: {
        'api-key': apiKey,
        'Content-Type': 'application/json',
        'signature': signature,
      },
    });
    console.log('Create Listen Key Response:', response.data);
    return response.data.listenKey;
  } catch (error) {
    console.error(
      'Error creating Listen Key:',
      error.response ? error.response.data : error.message
    );
    throw error; // Rethrow the error for further handling
  }
}
</code></pre></div>
<h2 id="authenticated-web-sockets">Authenticated Web Sockets</h2>

<p>Authenticated Web Socket stream base URL <code>https://fawss.pi42.com/auth-stream</code></p>

<p>Event listeners are described below:</p>
<div class="highlight"><pre class="highlight plaintext"><code>const serverUrl = `https://fawss.pi42.com/auth-stream/${listenKey}`;

// Create a new socket connection
const socket = io(serverUrl);

// Event listener for when the connection is open
socket.on('connect', () =&gt; {
  console.log('Connected to WebSocket server');
});

// Event listener for messages from the server

// Event listener for newPosition events
socket.on('newPosition', (data: any) =&gt; {
  console.log('New position received:', data);
});

// Listen for order filled event
socket.on('orderFilled', (data: any) =&gt; {
  console.log('Order filled:', data);
});

// Listen for order partially filled event
socket.on('orderPartiallyFilled', (data: any) =&gt; {
  console.log('Order partially filled:', data);
});

// Listen for order cancelled event
socket.on('orderCancelled', (data: any) =&gt; {
  console.log('Order cancelled:', data);
});

// Listen for order failed event
socket.on('orderFailed', (data: any) =&gt; {
  console.log('Order failed:', data);
});

// Listen for new order event
socket.on('newOrder', (data: any) =&gt; {
  console.log('New order:', data);
});

// Listen for update position event
socket.on('updatePosition', (data: any) =&gt; {
  console.log('Position updated:', data);
});

// Listen for close position event
socket.on('closePosition', (data: any) =&gt; {
  console.log('Position closed:', data);
});

// Listen for balance update event
socket.on('balanceUpdate', (data: any) =&gt; {
  console.log('Balance updated:', data);
});

// Listen for new trade event
socket.on('newTrade', (data: any) =&gt; {
  console.log('New trade:', data);
});

// Listen for session expiry
socket.on('sessionExpired', (data: any) =&gt; {
  console.log('Session Expired:', data);
});

// Event listener for when the connection is closed
socket.on('disconnect', () =&gt; {
  console.log('Disconnected from WebSocket server');
});
</code></pre></div>
<h2 id="public-web-sockets">Public Web Sockets</h2>

<p>Public Web Socket URL <code>https://fawss.pi42.com/</code>. Once connected, users can subscribe to different topics mentioned below:</p>

<table>
    <thead>
        <tr>
            <th>Parameter</th>
            <th>Example</th>
            <th>Listening Topic</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>contract_pair@depth_minGrouping</td>
            <td>btcinr@depth
            _
            0.1</td>
            <td>depthUpdate</td>
        </tr>
        <tr>
            <td>contract
            _pair@kline
            _
            interval</td>
            <td>btcinr@kline
            _
            1m</td>
            <td>kline</td>
        </tr>
        <tr>
            <td>contract
            _pair@markPrice</td>
            <td>btcinr@markPrice</td>
            <td>markPriceUpdate</td>
        </tr>
        <tr>
            <td>contract
            _pair@aggTrade</td>
            <td>btcinr@aggTrade</td>
            <td>aggTrade</td>
        </tr>
        <tr>
            <td>contract
            _pair@ticker</td>
            <td>btcinr@ticker</td>
            <td>24hrTicker</td>
        </tr>
        <tr>
            <td>contract
            _pair@marketInfo</td>
            <td>btcinr@marketInfo</td>
            <td>marketInfo</td>
        </tr>
        <tr>
            <td>markPriceArr</td>
            <td>N/A</td>
            <td>markPriceArr</td>
        </tr>
        <tr>
            <td>tickerArr</td>
            <td>N/A</td>
            <td>tickerArr</td>
        </tr>
        <tr>
            <td>All contracts details</td>
            <td>N/A</td>
            <td>allContractDetails</td>
        </tr>
</table>

<ul>
<li>Intervals: The intervals for kline (candlestick) data can be <code>1m</code>, <code>3m</code>, <code>5m</code>, <code>15m</code>, <code>30m</code>, <code>1h</code>, <code>2h</code>, <code>4h</code>, <code>6h</code>, <code>8h</code>, <code>12h</code>, <code>1d</code>, <code>3d</code>, <code>1w</code>, <code>1M</code>.</li>
<li>MinGroupings: Depth groupings vary by contract. For example, 0.1 is used for BTC.</li>
</ul>
<div class="highlight"><pre class="highlight plaintext"><code>import { io } from 'socket.io-client';

// WebSocket server URL
const serverUrl = 'https://fawss.pi42.com/';

// Create a new socket connection
const socket = io(serverUrl);

// Event listener for when the connection is open
socket.on('connect', () =&gt; {
  console.log('Connected to WebSocket server');
  subscribeToTopics();
});

// Event listener for when the connection is closed
socket.on('disconnect', () =&gt; {
  console.log('Disconnected from WebSocket server');
});

// Event listener for errors
socket.on('error', (error: any) =&gt; {
  console.error('Socket.IO error:', error);
});

// Function to subscribe to various WebSocket topics
function subscribeToTopics() {
  const topics = ['btcinr@depth_0.1', 'btcinr@markPrice']; // List of topics you want to subscribe to

  // Subscribe to each topic
  socket.emit('subscribe', {
    params: topics, // Sends the topics array to the WebSocket server
  });

  // Event listener for updates on various data topics
  socket.on('depthUpdate', (data) =&gt; {
    console.log('depthUpdate: ', data);
  });

  socket.on('kline', (data) =&gt; {
    console.log('kline: ', data);
  });

  socket.on('markPriceUpdate', (data) =&gt; {
    console.log('markPriceUpdate: ', data);
  });

  socket.on('aggTrade', (data) =&gt; {
    console.log('aggTrade: ', data);
  });

  socket.on('24hrTicker', (data) =&gt; {
    console.log('24hrTicker: ', data);
  });

  socket.on('marketInfo', (data) =&gt; {
    console.log('marketInfo: ', data);
  });

  socket.on('markPriceArr', (data) =&gt; {
    console.log('markPriceArr: ', data);
  });

  socket.on('tickerArr', (data) =&gt; {
    console.log('tickerArr: ', data);
  });

  socket.on('marginRate', (data) =&gt; {
    console.log('marginRate: ', data);
  });
}
</code></pre></div>
<h2 id="get-listen-key">Get Listen Key</h2>

<p><code>POST /v1/retail/listen-key</code></p>

<p>Obtain a WebSocket listen key from the endpoint. </p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">getListenKey</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/retail/listen-key</span><span class="dl">"</span><span class="p">;</span>

    <span class="c1">// Call the postRequest function</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">postRequest</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="k">def</span> <span class="nf">create_or_update_listen_key</span><span class="p">():</span>
  <span class="n">timestamp</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">))</span>

  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'timestamp'</span><span class="p">:</span> <span class="n">timestamp</span>
  <span class="p">}</span>

  <span class="c1"># Convert the parameters to a query string (if signing a query string)
</span>  <span class="n">data_to_sign</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s">','</span><span class="p">,</span> <span class="s">':'</span><span class="p">))</span>
  <span class="n">signature</span> <span class="o">=</span> <span class="n">generate_signature</span><span class="p">(</span><span class="n">api_secret</span><span class="p">,</span> <span class="n">data_to_sign</span><span class="p">)</span>

  <span class="c1"># Headers for the request
</span>  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'api-key'</span><span class="p">:</span> <span class="n">api_key</span><span class="p">,</span>
      <span class="s">'Content-Type'</span><span class="p">:</span> <span class="s">'application/json'</span><span class="p">,</span>
      <span class="s">'signature'</span><span class="p">:</span> <span class="n">signature</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="k">try</span><span class="p">:</span>
      <span class="c1"># Send the POST request to create or update a listen key
</span>      <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">listen_key_url</span><span class="si">}</span><span class="s">'</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
      <span class="n">response</span><span class="p">.</span><span class="n">raise_for_status</span><span class="p">()</span>
      <span class="n">response_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>
      <span class="k">print</span><span class="p">(</span><span class="s">'Listen key created or updated successfully:'</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
  <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Failed </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

</code></pre></div>
<h2 id="update-listen-key">Update Listen Key</h2>

<p><code>PUT /v1/retail/listen-key</code></p>

<p>Update the expiry of a listen key.</p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">updateListenKey</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/retail/listen-key</span><span class="dl">"</span><span class="p">;</span>

    <span class="c1">// Call the getRequest function</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">putRequest</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="k">def</span> <span class="nf">update_listen_key_expiry</span><span class="p">():</span>
  <span class="n">timestamp</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">))</span>

  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'timestamp'</span><span class="p">:</span> <span class="n">timestamp</span>
  <span class="p">}</span>

  <span class="n">data_to_sign</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s">','</span><span class="p">,</span> <span class="s">':'</span><span class="p">))</span>

  <span class="c1"># Generate the signature using the provided helper function
</span>  <span class="n">signature</span> <span class="o">=</span> <span class="n">generate_signature</span><span class="p">(</span><span class="n">api_secret</span><span class="p">,</span> <span class="n">data_to_sign</span><span class="p">)</span>

  <span class="c1"># Headers for the PUT request
</span>  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'api-key'</span><span class="p">:</span> <span class="n">api_key</span><span class="p">,</span>
      <span class="s">'signature'</span><span class="p">:</span> <span class="n">signature</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="k">try</span><span class="p">:</span>
      <span class="c1"># Send the PUT request to update the listen key expiry
</span>      <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">listen_key_url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
      <span class="k">print</span><span class="p">(</span><span class="s">'Listen key expiry updated successfully:'</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
  <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Failed </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div>
<h2 id="delete-listen-key">Delete Listen Key</h2>

<p><code>DELETE /v1/retail/listen-key</code></p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">deleteListenKey</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/retail/listen-key</span><span class="dl">"</span><span class="p">;</span>

    <span class="c1">// Call the deleteRequest function</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">deleteRequest</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="k">def</span> <span class="nf">delete_listen_key</span><span class="p">():</span>
  <span class="c1"># Generate the current timestamp
</span>  <span class="n">timestamp</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">))</span>

  <span class="c1"># Prepare the data for the request (listenKey is passed in the URL path)
</span>  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'timestamp'</span><span class="p">:</span> <span class="n">timestamp</span>
  <span class="p">}</span>

  <span class="c1"># Generate the signature based on the params
</span>  <span class="n">data_to_sign</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s">','</span><span class="p">,</span> <span class="s">':'</span><span class="p">))</span>
  <span class="n">signature</span> <span class="o">=</span> <span class="n">generate_signature</span><span class="p">(</span><span class="n">api_secret</span><span class="p">,</span> <span class="n">data_to_sign</span><span class="p">)</span>

  <span class="c1"># Headers for the DELETE request
</span>  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'api-key'</span><span class="p">:</span> <span class="n">api_key</span><span class="p">,</span>
      <span class="s">'signature'</span><span class="p">:</span> <span class="n">signature</span><span class="p">,</span>
      <span class="s">'accept'</span><span class="p">:</span> <span class="s">'*/*'</span>
  <span class="p">}</span>

  <span class="c1"># Construct the full URL, inserting the listenKey into the path
</span>  <span class="n">delete_listen_key_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">base_url</span><span class="si">}</span><span class="s">/v1/retail/listen-key/"</span>

  <span class="k">try</span><span class="p">:</span>
      <span class="c1"># Send the DELETE request to delete the listen key
</span>      <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">delete_listen_key_url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
      <span class="n">response</span><span class="p">.</span><span class="n">raise_for_status</span><span class="p">()</span> <span class="c1"># Raises an error for 4xx/5xx responses
</span>      <span class="k">print</span><span class="p">(</span><span class="s">'Listen key deleted successfully.'</span><span class="p">)</span>
  <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: </span><span class="si">{</span><span class="n">err</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">text</span> <span class="k">if</span> <span class="n">err</span><span class="p">.</span><span class="n">response</span> <span class="k">else</span> <span class="n">err</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div>