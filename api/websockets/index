<h1 id='web-sockets'>Web Sockets</h1>

<h2 id="get-listen-key">Get Listen Key</h2>

<p><code>POST /v1/retail/listen-key</code></p>

<p>Obtain a WebSocket listen key from the endpoint.</p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">getListenKey</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/retail/listen-key</span><span class="dl">"</span><span class="p">;</span>

    <span class="c1">// Call the postRequest function</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">postRequest</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="k">def</span> <span class="nf">create_or_update_listen_key</span><span class="p">():</span>
  <span class="n">timestamp</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">))</span>

  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'timestamp'</span><span class="p">:</span> <span class="n">timestamp</span>
  <span class="p">}</span>

  <span class="c1"># Convert the parameters to a query string (if signing a query string)
</span>  <span class="n">data_to_sign</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s">','</span><span class="p">,</span> <span class="s">':'</span><span class="p">))</span>
  <span class="n">signature</span> <span class="o">=</span> <span class="n">generate_signature</span><span class="p">(</span><span class="n">api_secret</span><span class="p">,</span> <span class="n">data_to_sign</span><span class="p">)</span>

  <span class="c1"># Headers for the request
</span>  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'api-key'</span><span class="p">:</span> <span class="n">api_key</span><span class="p">,</span>
      <span class="s">'Content-Type'</span><span class="p">:</span> <span class="s">'application/json'</span><span class="p">,</span>
      <span class="s">'signature'</span><span class="p">:</span> <span class="n">signature</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="k">try</span><span class="p">:</span>
      <span class="c1"># Send the POST request to create or update a listen key
</span>      <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">listen_key_url</span><span class="si">}</span><span class="s">'</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
      <span class="n">response</span><span class="p">.</span><span class="n">raise_for_status</span><span class="p">()</span>
      <span class="n">response_data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>
      <span class="k">print</span><span class="p">(</span><span class="s">'Listen key created or updated successfully:'</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
  <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Failed </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

</code></pre></div>
<h2 id="update-listen-key">Update Listen Key</h2>

<p><code>PUT /v1/retail/listen-key</code></p>

<p>Update the expiry of a listen key.</p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">updateListenKey</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/retail/listen-key</span><span class="dl">"</span><span class="p">;</span>

    <span class="c1">// Call the getRequest function</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">putRequest</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="k">def</span> <span class="nf">update_listen_key_expiry</span><span class="p">():</span>
  <span class="n">timestamp</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">))</span>

  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'timestamp'</span><span class="p">:</span> <span class="n">timestamp</span>
  <span class="p">}</span>

  <span class="n">data_to_sign</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s">','</span><span class="p">,</span> <span class="s">':'</span><span class="p">))</span>

  <span class="c1"># Generate the signature using the provided helper function
</span>  <span class="n">signature</span> <span class="o">=</span> <span class="n">generate_signature</span><span class="p">(</span><span class="n">api_secret</span><span class="p">,</span> <span class="n">data_to_sign</span><span class="p">)</span>

  <span class="c1"># Headers for the PUT request
</span>  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'api-key'</span><span class="p">:</span> <span class="n">api_key</span><span class="p">,</span>
      <span class="s">'signature'</span><span class="p">:</span> <span class="n">signature</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="k">try</span><span class="p">:</span>
      <span class="c1"># Send the PUT request to update the listen key expiry
</span>      <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">listen_key_url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
      <span class="k">print</span><span class="p">(</span><span class="s">'Listen key expiry updated successfully:'</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
  <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Failed </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div>
<h2 id="delete-listen-key">Delete Listen Key</h2>

<p><code>DELETE /v1/retail/listen-key</code></p>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">deleteListenKey</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/v1/retail/listen-key</span><span class="dl">"</span><span class="p">;</span>

    <span class="c1">// Call the deleteRequest function</span>
    <span class="k">return</span> <span class="k">await</span> <span class="nx">deleteRequest</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="p">{});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="highlight python tab-python"><code><span class="k">def</span> <span class="nf">delete_listen_key</span><span class="p">():</span>
  <span class="c1"># Generate the current timestamp
</span>  <span class="n">timestamp</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">))</span>

  <span class="c1"># Prepare the data for the request (listenKey is passed in the URL path)
</span>  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'timestamp'</span><span class="p">:</span> <span class="n">timestamp</span>
  <span class="p">}</span>

  <span class="c1"># Generate the signature based on the params
</span>  <span class="n">data_to_sign</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s">','</span><span class="p">,</span> <span class="s">':'</span><span class="p">))</span>
  <span class="n">signature</span> <span class="o">=</span> <span class="n">generate_signature</span><span class="p">(</span><span class="n">api_secret</span><span class="p">,</span> <span class="n">data_to_sign</span><span class="p">)</span>

  <span class="c1"># Headers for the DELETE request
</span>  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'api-key'</span><span class="p">:</span> <span class="n">api_key</span><span class="p">,</span>
      <span class="s">'signature'</span><span class="p">:</span> <span class="n">signature</span><span class="p">,</span>
      <span class="s">'accept'</span><span class="p">:</span> <span class="s">'*/*'</span>
  <span class="p">}</span>

  <span class="c1"># Construct the full URL, inserting the listenKey into the path
</span>  <span class="n">delete_listen_key_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">base_url</span><span class="si">}</span><span class="s">/v1/retail/listen-key/"</span>

  <span class="k">try</span><span class="p">:</span>
      <span class="c1"># Send the DELETE request to delete the listen key
</span>      <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">delete_listen_key_url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
      <span class="n">response</span><span class="p">.</span><span class="n">raise_for_status</span><span class="p">()</span> <span class="c1"># Raises an error for 4xx/5xx responses
</span>      <span class="k">print</span><span class="p">(</span><span class="s">'Listen key deleted successfully.'</span><span class="p">)</span>
  <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: </span><span class="si">{</span><span class="n">err</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">text</span> <span class="k">if</span> <span class="n">err</span><span class="p">.</span><span class="n">response</span> <span class="k">else</span> <span class="n">err</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"An unexpected error occurred: </span><span class="si">{</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div>